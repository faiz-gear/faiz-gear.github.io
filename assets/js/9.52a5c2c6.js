(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{332:function(t,s,a){"use strict";a.r(s);var n=a(26),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",[t._v("1.为什么token放在sessionStorage而不是localStorage？")]),t._v(" "),a("p",[t._v("是因为local是永久化，除非用户清除local信息，否则永久存在。sessiosStorage（会话储存）是在当前窗口或者标签页才存在，如果关闭就清空。token只需要在特定网页中使用，所以配合session使用。")]),t._v(" "),a("h2",[t._v("2.为什么使用token而不是cookie的sessionID")]),t._v(" "),a("p",[t._v("session弊端：1、每个用户都有不同session，存放在服务器的内存中，如果用户过多会让内存压力增大。2.CSRF跨站伪造请求攻击，安全性不稳定，cookie如果被截获很容易受到攻击。3.扩展性不强，多个服务器，虽然每个服务器都执行的是同样的业务逻辑，但是session数据是保存在内存中的（不是共享的），访问不同服务器可能结果不同。")]),t._v(" "),a("p",[t._v("token好处：1.不会保留数据，服务器压力不大2.无状态，可以多个服务器共享3.避免攻击4.避开同源策略")]),t._v(" "),a("h2",[t._v("3.内存泄漏是什么情况？")]),t._v(" "),a("p",[t._v("内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。")]),t._v(" "),a("ul",[a("li",[t._v("setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。")]),t._v(" "),a("li",[t._v("闭包")]),t._v(" "),a("li",[t._v("控制台日志")]),t._v(" "),a("li",[t._v("循环（两个对象互相引用且彼此保留）")])]),t._v(" "),a("h2",[t._v("4.Vue 插槽")]),t._v(" "),a("p",[t._v("通常我们会在vue中将各种通用的功能单独拿出来进行封装，以便于后面复用，但是有时候需要复用的组件不是完美契合，这个时候就需要用到插槽，slot可以让用户拓展组件，更好的实现组件的复用。")]),t._v(" "),a("p",[t._v("插槽就是子组件中的提供给父组件使用的一个占位符，用"),t._t("default"),t._v(" 表示，父组件可以在这个占位符中填充任何模板代码，如 HTML、组件等，填充的内容会替换子组件的"),t._t("default"),t._v("标签。")],2),t._v(" "),a("p",[t._v("作用域插槽解决的问题：当父组件向子组件插槽传递模板内容时存在访问子组件数据的问题")]),t._v(" "),a("h2",[t._v("5.数据类型")]),t._v(" "),a("p",[a("code",[t._v("undefined")]),t._v("、"),a("code",[t._v("null")]),t._v("、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）、symbol")]),t._v(" "),a("h2",[t._v("6.说出三种减低页面加载时间的方法?")]),t._v(" "),a("p",[t._v("1、压缩css、js文件\n2、合并js、css文件，减少http请求\n3、外部js、css文件放在最底下\n4、减少dom操作，尽可能用变量替代不必要的dom操作")]),t._v(" "),a("h2",[t._v("7.常用数组")]),t._v(" "),a("ol",[a("li",[t._v("forEach() 循环整个数组相当于for循环，带索引和值")]),t._v(" "),a("li",[t._v("concat() //合并多个数组，返回合并后的新数组，原数组没有变化。")]),t._v(" "),a("li",[t._v("filter() //返回一个新数组，包含通过callback函数测试的所有元素。")]),t._v(" "),a("li",[t._v("map() //返回新数组")]),t._v(" "),a("li",[t._v("every()和some() //every()和some()方法是数组的逻辑判定")]),t._v(" "),a("li",[t._v("findIndex()返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1")]),t._v(" "),a("li",[t._v("include()，判断数组是否包含给定的值，有返回true，没有返回false，第二个参数表示搜索的起始位置")])]),t._v(" "),a("h2",[t._v("8.原型链")]),t._v(" "),a("p",[a("strong",[t._v("对象原型proto")]),t._v("__，每个对象都会有的属性，new出来的实例通过proto属性来指向原型对象。不是标准方法，Object.getPrototypeOf()是标准方法")]),t._v(" "),a("p",[a("strong",[t._v("原型对象prototype")]),t._v("，每个构造函数都有prototype属性，是个对象，通过构造函数.prototype指向。")]),t._v(" "),a("p",[t._v("每一个构造函数都有prototype属性，指向另一个对象。这个prototype就是个对象，这个对象的所有属性方法，都会被构造函数所拥有的。")]),t._v(" "),a("p",[t._v("一般情况下我们的公共属性直接定义在构造函数里面，公共的方法我们放在原型对象里面。")]),t._v(" "),a("p",[t._v("__proto__对象原型和原型对象是等价的，只不过写在不同对象上，一个写在函数后，一个写在对象后。")]),t._v(" "),a("h2",[t._v("9.面向对象概念")]),t._v(" "),a("p",[t._v("面向对象 是操作对象，把事务分解成一个个对象，然后对对象进行操作，有利于复用、维护、扩展。")]),t._v(" "),a("p",[t._v("这个事件中有哪些类和对象，这些类和对象有哪些属性和方法，然后再将对象联系起来。")]),t._v(" "),a("p",[t._v("面向过程就是分析这个事件，分析出解决问题的步骤，一步一步实现，使用的时候再一步步调用。")]),t._v(" "),a("h2",[t._v("10.类的继承")]),t._v(" "),a("p",[t._v("类：ES6 中新增加了类的概念，可以使用 class 关键字声明一个类，之后以这个类来实例化对象。类抽象了对象的公共部分，它泛指某一大类（class）对象特指某一个，通过类实例化一个具体的对象（"),a("strong",[t._v("就是ES6升级版的构造函数，等同于ES5的构造函数")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//es6的class 类")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1.创建类 class 创建一个明星类                                        ")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Star")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//constructor方法式类的默认构造函数")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("uname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("sex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//形参等于创建一个空变量 var uname;var sex;没有值 是undefined")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("uname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("uname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sex"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("sex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2.利用类创建对象 new")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" lb"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Star")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'梁博'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'男'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" zx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Star")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'周迅'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'女'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("zx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("uname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//(1) 通过class 关键字创建类, 类名我们还是习惯性定义首字母大写")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//(2) 类里面有个constructor 函数,可以接受传递过来的参数,同时返回实例对象")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//(3) constructor 函数 只要 new 生成实例时,就会自动调用这个函数, 如果我们不写这个函数,类也会自动生成这个函数")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//(4) 生成实例 new 不能省略")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//(5) 最后注意语法规范, 创建类 类名后面不要加小括号,生成实例 类名后面加小括号, 构造函数不需要加function")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//(6) 多个函数之间不需要用逗号分隔")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//自动生成的constructor函数？ 自动生成为一个空函数 没有形参 没有意义")]),t._v("\n")])])]),a("p",[t._v("类的继承：extends 关键字")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v(" \t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Father")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sing")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("song")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'唱'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("song"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("money")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Son")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Father")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果constructor都不写 则直接继承父级的constructor 如果自己写了constructor里面却没有写super 则会报错")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("m")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//形参不必跟父类相同 只是名字而已 里面的数值是相等的")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果需要父类的属性 就需要用到super")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果像方法money中没有调用父类的属性 则不需要")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// super关键字(n,m)")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//可以访问和调用父类的构造函数")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" son"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       \tson"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// son.sing('男孩');")]),t._v("\n        son"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("money")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("注意：继承中，如果实例化输出一个方法，子类有就调用自己，子类没有就查找父类。")]),t._v(" "),a("p",[a("strong",[t._v("super关键字")]),t._v("，可以访问和调用父类函数。")]),t._v(" "),a("p",[t._v("ES6 的继承机制，实质是先将父类实例对象的属性和方法，加到"),a("code",[t._v("this")]),t._v("上面**（所以必须先调用"),a("code",[t._v("super")]),t._v("方法），然后再用子类的构造函数修改"),a("code",[t._v("this")]),t._v("。**")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("   \t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Father")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n               "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("say")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// console.log('我是父亲');")]),t._v("\n                   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'我是父亲'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n               "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n           "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n           "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Son")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Father")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n               "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("say")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// console.log('我是儿子');")]),t._v("\n                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//调用父级属性 super.say()是返回值 如果父亲是log则是undefined 如果父亲用的是返回值 则返回返回值")]),t._v("\n                   console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("say"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这是个方法 函数就是个对象 super为父级 调用自己的say函数")]),t._v("\n                   console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("say")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'的儿子'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n               "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n           "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n           "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" son "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Son")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n           son"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("say")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("注意：时刻注意this的指向问题,类里面的共有的属性和方法一定要加this使用.")]),t._v(" "),a("p",[t._v("(1).constructor中的this指向的是new出来的实例对象")]),t._v(" "),a("p",[t._v("(2).自定义的方法,一般也指向的new出来的实例对象")]),t._v(" "),a("p",[t._v("(3).绑定事件之后this指向的就是触发事件的事件源")]),t._v(" "),a("h2",[t._v("11.this指向")]),t._v(" "),a("ol",[a("li",[t._v("普通函数 this指向window")]),t._v(" "),a("li",[t._v("对象.方法名() this指向对象")]),t._v(" "),a("li",[t._v("立即调用函数 this指向window")]),t._v(" "),a("li",[t._v("定时器函数 this指向window")]),t._v(" "),a("li",[t._v("构造函数 this指向对象实例")]),t._v(" "),a("li",[t._v("绑定事件函数调用 this指向绑定事件的调用者")]),t._v(" "),a("li",[t._v("箭头函数 this指向父级作用域的this 与外层this保持一致")])]),t._v(" "),a("h2",[t._v("12.在字符串每个字符中添加空格")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" text "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"JavaScript"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ntext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",[t._v("13.预检请求是什么？")]),t._v(" "),a("p",[t._v("OPTIONS 请求属于预检请求，当存在跨域并且属于复杂请求时，浏览器自动发送判断接口是否接受这个请求")]),t._v(" "),a("p",[t._v("简单请求：如果请求方法是GET POST HEADE 并且请求头中只包含基本的请求（如：Content-Type/Accept/Accept-Type/...)")]),t._v(" "),a("p",[t._v("复杂请求：不是简单就是复杂")]),t._v(" "),a("h2",[t._v("14.promise相关")]),t._v(" "),a("p",[t._v("异常中断：用一个新的promise不改变状态来中止")]),t._v(" "),a("p",[t._v("异常穿透：在其中某个then中抛出一个错误，后面没有指定错误回调，会抛给服务器，或者被catch捕捉。")]),t._v(" "),a("h2",[t._v("15.选择器权重")]),t._v(" "),a("p",[t._v("style内联为1000，id选择器为0100，类、伪类和属性选择器为0010，元素选择器和伪元素为0001，通配符、子选择器、相邻选择器如*>+为0000。如果使用!important则是最高级的")]),t._v(" "),a("h2",[t._v("16.px em rem 区别")]),t._v(" "),a("p",[t._v("px(pixel)像素：绝对单位。像素 px 是相对于显示器屏幕分辨率而言的，是一个虚拟长度单位，是计算机系统的数字化图像长度单位，如果 px 要换算成物理长度，需要指定精度 DPI。")]),t._v(" "),a("p",[t._v("em:相对长度单位，相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。它会继承父级元素的字体大小，因此并不是一个固定的值。")]),t._v(" "),a("p",[t._v("rem:CSS3 新增的一个相对单位（root em，根 em），使用 rem 为元素设定字体大小时，仍然是相对大小，但相对的只是 HTML根元素。")]),t._v(" "),a("p",[t._v("简单理解："),a("strong",[t._v("em相对于父元素，rem相对于根元素。")])]),t._v(" "),a("h2",[t._v("17.闭包")]),t._v(" "),a("p",[t._v("变量根据作用域不同分为局部变量和全局变量。")]),t._v(" "),a("ol",[a("li",[t._v("函数内部可以使用全局变量")]),t._v(" "),a("li",[t._v("函数外部不可以使用局部变量（父亲不能访问儿子变量）")]),t._v(" "),a("li",[t._v("当函数执行完毕，会销毁该作用域中的局部变量")])]),t._v(" "),a("p",[t._v("闭包："),a("strong",[t._v("就是有权访问另一个作用域中变量的函数")])]),t._v(" "),a("p",[t._v("一个作用域访问另外一个函数内部变量，被访问的函数被称为闭包函数。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("v")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("v")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以看到上面两个函数效果一致，只不过传的值不同")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 利用闭包封装一个函数来优化冗余")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("between")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("v")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("b\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("between")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [2,3,4,5]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个function(v)是between的子函数，利用闭包特性可以不断访问父级函数的变量a,b。将这个function返回出去当做filter参数的回调函数，每次调用都会开辟一个新的环境")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"C:%5CUsers%5C%E9%BB%91%E7%B1%8D%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107200208676.png",alt:"image-20201107200208676"}})]),t._v(" "),a("p",[a("strong",[t._v("好处")]),t._v("：1.可以读取函数内部的变量2.让这些变量的值始终保存在内存中（私有化变量）")]),t._v(" "),a("p",[a("strong",[t._v("为什么需要闭包")]),t._v("：需要在全局环境中访问内部变量")]),t._v(" "),a("h2",[t._v("18.如何封装出一个块级作用域")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在外包装一个立即执行函数，每次传进一个i，里面的定时器需要1s后才执行所以保留父级作用域环境中的变量a。这样就模拟了一个块级作用域")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("https://www.bilibili.com/video/BV1YJ411R7ap?p=8")]),t._v(" "),a("h2",[t._v("19.环境和作用域")]),t._v(" "),a("p",[t._v("全局环境不会被回收，因为有可能在控制台所使用")]),t._v(" "),a("p",[t._v("写在函数内，不可访问到，而且没有其他地方引用他们的话，当函数执行完，他们都会被回收。")]),t._v(" "),a("p",[t._v("函数作用域在调用完函数后且没有其他引用时就会销毁，下次再调用就是新开辟一个作用域。")]),t._v(" "),a("h2",[t._v("20.如何解决内存泄漏")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("closure")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" Divs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementByTag")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Div'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" test "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DivS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHTML"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    DivS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onclick")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    oDiv "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果每次都存储这个对象会导致内存的无用浪费，所以只拿到需要的值后把对象清空，打印的时候打印这个值就好")]),t._v("\n")])])]),a("h2",[t._v("21.箭头函数的好处")]),t._v(" "),a("p",[t._v("1、更简洁的语法 2、解决this指向问题，原生this指向调用者，箭头this指向定义时的对象（上一级作用域的this）")]),t._v(" "),a("h2",[t._v("22.防抖和节流")]),t._v(" "),a("h3",[t._v("防抖(debounce)")]),t._v(" "),a("p",[t._v("说明：当事件被触发后，延迟 "),a("code",[t._v("n")]),t._v(" 秒后再执行回调，如果在这 "),a("code",[t._v("n")]),t._v(" 秒内事件又被触发，则重新计时。")]),t._v(" "),a("p",[t._v("效果：频繁触发只会实现一次")]),t._v(" "),a("p",[t._v("应用场景：用户输入一连串数字时，，可以通过防抖策略，只在输入完后，才执行查询的请求，这样可以有效减少请求次数，节约请求资源；")]),t._v(" "),a("h3",[t._v("节流")]),t._v(" "),a("p",[t._v("说明：可以减少一段时间内事件的触发频率。")]),t._v(" "),a("p",[t._v("应用场景：")]),t._v(" "),a("ol",[a("li",[t._v("鼠标连续不断地触发某事件（如点击），只在单位时间内只触发一次；")]),t._v(" "),a("li",[t._v("懒加载时要监听计算滚动条的位置，但不必每次滑动都触发，可以降低计算的频率，而不必去浪费 CPU 资源；")])]),t._v(" "),a("h3",[t._v("节流阀的概念")]),t._v(" "),a("p",[t._v("高铁卫生间是否被占用，由红绿灯控制，红灯表示被占用，绿灯表示可使用。")]),t._v(" "),a("p",[t._v("假设每个人上卫生间都需要花费5分钟，则五分钟之内，被占用的卫生间无法被其他人使用。")]),t._v(" "),a("p",[t._v("上一个人使用完毕后，需要将红灯"),a("strong",[t._v("重置")]),t._v("为绿灯，表示下一个人可以使用卫生间。")]),t._v(" "),a("p",[t._v("下一个人在上卫生间之前，需要"),a("strong",[t._v("先判断控制灯")]),t._v("是否为绿色，来知晓能否上卫生间。")]),t._v(" "),a("p",[t._v("节流阀为空，表示可以执行下次操作；不为空，表示不能执行下次操作。")]),t._v(" "),a("p",[t._v("当前操作执行完，必须将节流阀"),a("strong",[t._v("重置")]),t._v("为空，表示可以执行下次操作了。")]),t._v(" "),a("p",[t._v("每次执行操作前，必须**先判断节流阀是否为空")]),t._v(" "),a("p",[a("strong",[t._v("区别：")])]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("防抖")]),t._v("：如果事件被频繁触发，防抖能保证只有最后一次触发生效！前面 N 多次的触发都会被忽略！")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("节流")]),t._v("：如果事件被频繁触发，节流能够减少事件触发的频率，因此，节流是有选择性地执行一部分事件！")])])]),t._v(" "),a("h2",[t._v("23.同源策略")]),t._v(" "),a("p",[t._v('同源策略/SOP（Same origin policy）是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是指"'),a("strong",[t._v("协议+域名+端口")]),t._v('"三者相同，即便两个不同的域名指向同一个ip地址，也非同源。')]),t._v(" "),a("h2",[t._v("24.cookie")]),t._v(" "),a("p",[t._v("Cookie实际上是key-value格式呈现的。客户端向服务器发起请求，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie。客户端浏览器会把Cookie保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户状态。")]),t._v(" "),a("h2",[t._v("25.token的作用")]),t._v(" "),a("p",[t._v("token在计算机身份认证中是令牌（临时）的意思，在词法分析中是标记的意思。一般作为邀请、登录系统使用。维持登录状态")]),t._v(" "),a("h2",[t._v("26.typeof与instanceof和Object.toString.call")]),t._v(" "),a("p",[t._v("typeof仅能区别基本类型，即数字，字符串，undefined，布尔，对象。对于数组这种来说，只会返回Object，不能区分开。")]),t._v(" "),a("p",[t._v("instanceof能检测数组函数和对象，不能检测Number,boolean,String")]),t._v(" "),a("p",[t._v("Object.prototype.toString.call可以检测所有数据类型")]),t._v(" "),a("h2",[t._v("27.当在地址栏中输入内容回车时，浏览器干了啥？")]),t._v(" "),a("p",[t._v("浏览器进程中的UI线程会监听到用户的输入，并判断输入内容类型，如果是关键字，则会使用默认配置的搜索引擎来查询，如果是域名，则会交给网络线程处理，通过DNS解析获取IP地址，接着开始与服务器建立TCP连接获取数据，获取到数据后，浏览器的安全系统会检查是否存在安全问题，如果存在，则会提示用户，用户也可选择无视，继续访问，接着网络线程会通知UI线程准备完毕，然后UI线程会创建一个渲染器进程，并通过IPC管道把数据传递给渲染器进程来渲染页面，接着渲染器进程的主线程开始逐层深入解析HTML生成DOM Tree，在解析的过程中如果发现JS脚本，则会停止解析，执行JS脚本，接着继续解析HTML，DOM Tree生成后，接着解析样式，然后基于DOM Tree和样式生成Layout Tree（Layout Tree和DOMTree并不是一一对应的，比如：display: none的节点不在Layout Tree中，而::before、::after这种伪元素不在DOM Tree中），有了Layout Tree后，我们还需要知道以什么顺序绘制（paint），主线程会遍历Layout Tree创建绘制记录表，该表记录了绘制的顺序，确保在屏幕上显示正确的层级，接着遍历Layout Tree生成Layer Tree图层树，接着主线程将Layer Tree和绘制顺序信息传递给合成器线程，合成器线程按规则进行分图层，并将每个图层栅格化，由于一层可能像整个页面一样大，所以会拆分成若干个图块，然后将每个图块发送给栅格化线程处理，栅格化线程处理完后将他们存储在GPU内存中，合成器线程将按需收集这些图块信息（draw quads）生成一个合成器帧（Compositor Frame），接着通过IPC将合成器帧传回给浏览器进程，然后交给GPU渲染展示到屏幕上，用户就看到了页面内容，当后续页面再发生变化，都会生成一个新的合成器帧，再传到GPU进行渲染，当我们改变某个元素的尺寸位置属性时，会重新进行样式计算、布局、绘制以及后面的所有流程，这种行为我们称为重排，当我们改变某个元素的颜色属性时，不会重新触发布局，但还是会触发样式计算和绘制，这个就是重绘，重排和重绘都会占用主线程，JS也是运行在主线程上，所以就会出现抢占执行时间的问题，如果写了一个不断导致重排重绘的动画，浏览器则需要在每一帧都运行样式计算、布局和绘制的操作，我们知道当页面以每秒60帧的刷新率（1000/60≈每帧16ms）才不会让用户感觉到卡顿，如果在运行动画时还有大量的JS任务需要执行，当在一帧的时间内布局和绘制结束后如果还有剩余时间，JS就会拿到主线程的使用权，如果JS执行时间过长，在下一帧开始时还没有及时归还主线程，就会导致下一帧动画没有按时渲染，出现动画的卡顿，可以通过两种手段优化，第一种就是通过requestAnimationFrame()这个API来帮助我们解决，这个方法会在每一帧的剩余时间内调用，下一帧开始前暂停JS执行，归还主线程，通过API的回调，我们可以把JS任务分成一些更小的任务块，React最新的渲染引擎React Fiber就是用到了这个API来做了很多优化，第二种优化方法，由于分图层和栅格化的整个流程是不占用主线程的，只在合成器线程和栅格线程中运行，这就意味着它无需和JS抢夺主线程，我们刚才提到如果反复进行重排和重绘可能会导致掉帧，这是因为有可能JS执行阻塞了主线程，而CSS中有个动画属性叫transform，通过该属性实现的动画不会经过样式计算、布局和绘制，而是直接运行在合成器线程和栅格化线程中，所以不会受到主线程中JS执行的影响，更重要的是，节省了很多运算时间，一般位置变化，宽高变化等等，都可以使用transform来代替。")]),t._v(" "),a("h2",[t._v("28.计算属性和watch和methods区别")]),t._v(" "),a("p",[t._v("计算属性有缓存，可以节省内存空间。")]),t._v(" "),a("p",[t._v("computed计算属性是用来声明式的描述一个值依赖了其它的值，为响应式依赖，当所依赖的值或者变量改变时，计算属性也会跟着改变；")]),t._v(" "),a("p",[t._v("watch 监听的是已经在 data 中定义的变量，当该变量变化时，会触发 watch 中的方法；")]),t._v(" "),a("p",[t._v("methods就像我们写的普通函数一样，需要我们主动去调用才会执行，不会返回结果，只是执行过程。")]),t._v(" "),a("p",[t._v("当我们在获取一个数据时需要对一个大的数组进行大量循环才能获取时，那我们选择计算属性，基于依赖进行缓存那将会节省大量的性能消耗。")]),t._v(" "),a("p",[t._v("应用场景：")]),t._v(" "),a("p",[t._v("watch适合处理的场景是，侦听一个数的变化，当该数据变化，来处理其他与之相关数据的变化**（该数据影响别的多个数据）**\ncomputed适合处理的场景是，获得一个值或者结果，该结果受其他的依赖的影响。"),a("strong",[t._v("（一个数据受多个数据影响）")])]),t._v(" "),a("p",[t._v("methods用的是也是最多的，一般的事件绑定，普通函数，请求数据方法都是在methods中处理。然后vue的生命周期函数就是在相应的或者合适的时机调用这些定义好的函数。")]),t._v(" "),a("h2",[t._v("29.在v-model上怎么用Vuex中state的值？")]),t._v(" "),a("p",[t._v("运用计算属性")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("input v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("model"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"message"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\ncomputed"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    message"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("message\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("commit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'updateMessage'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",[t._v("30.Vuex的好处")]),t._v(" "),a("p",[t._v("1、能够在vuex中集中管理共享的数据，易于开发和后期维护；\n2、能够高效地实现组件之间的数据共享，提高开发效率；\n3、存储在vuex的数据都是响应式的，能够实时保持数据与页面的同步；")]),t._v(" "),a("h2",[t._v("31.null和undefined区别")]),t._v(" "),a("p",[a("strong",[a("code",[t._v("null")]),t._v("表示没有对象，即该处不应该有值")])]),t._v(" "),a("p",[t._v("1） 作为函数的参数，表示该函数的参数不是对象")]),t._v(" "),a("p",[t._v("2） 作为对象原型链的终点")]),t._v(" "),a("p",[a("strong",[a("code",[t._v("undefined")]),t._v("表示缺少值，即此处应该有值，但没有定义")])]),t._v(" "),a("p",[t._v("1）定义了形参，没有传实参，显示undefined")]),t._v(" "),a("p",[t._v("2）对象属性名不存在时，显示undefined")]),t._v(" "),a("p",[t._v("3）函数没有写返回值，即没有写return，拿到的是undefined")]),t._v(" "),a("p",[t._v("4）写了return，但没有赋值，拿到的是undefined")]),t._v(" "),a("p",[t._v("null和undefined转换成number数据类型")]),t._v(" "),a("p",[a("strong",[a("code",[t._v("null")]),t._v(" 默认转成 "),a("code",[t._v("0")])])]),t._v(" "),a("p",[a("strong",[a("code",[t._v("undefined")]),t._v(" 默认转成 "),a("code",[t._v("NaN")])])]),t._v(" "),a("h2",[t._v("32.new 关键字干了什么？")]),t._v(" "),a("p",[t._v("1、在内存中创建一个空对象")]),t._v(" "),a("p",[t._v("2、将this指向这个对象")]),t._v(" "),a("p",[t._v("3、执行构造函数里的代码，给这个新对象添加属性和方法")]),t._v(" "),a("p",[t._v("4、返回这个新对象")]),t._v(" "),a("h2",[t._v("33.SPA单页面理解")]),t._v(" "),a("p",[t._v("SPA（single-page application）在Web页面初始化加载相应的HTML、JavaScript和CSS。加载完成，SPA不会因为用户的操作进行页面的重新加载和跳转，取而代之的则是由路由机制实现HTML内容的变换，UI与用户的交互，避免页面的重新加载。")]),t._v(" "),a("p",[t._v("好处：用户体验好，内容的改变不许重新加载整个页面，避免重复渲染，相对服务器压力小。架构清晰，前后端职责分离，前端进行交互逻辑后面负责数据处理。")]),t._v(" "),a("p",[t._v("缺点：初次加载时耗时过多。由于单页面应用在一个页面中显示所有内容，所以不能使用浏览器的前进后退，所有页面切换需要自己建立堆栈。SEO难度较大，不利于SEO。")]),t._v(" "),a("h2",[t._v("34.模块中的v-model")]),t._v(" "),a("p",[t._v("一个组件上的 "),a("code",[t._v("v-model")]),t._v(" 默认会利用名为 "),a("code",[t._v("value")]),t._v(" 的 prop 和名为 "),a("code",[t._v("input")]),t._v(" 的事件，但是像单选框、复选框等类型的输入控件可能会将 "),a("code",[t._v("value")]),t._v(" attribute 用于"),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#Value",target:"_blank",rel:"noopener noreferrer"}},[t._v("不同的目的"),a("OutboundLink")],1),t._v("。"),a("code",[t._v("model")]),t._v(" 选项可以用来避免这样的冲突")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Vue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("component")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'base-checkbox'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  model"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    prop"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'checked'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    event"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'change'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",[t._v("35.sync修饰符的作用")]),t._v(" "),a("p",[t._v("vue封装了 子组件要修改父组件传过来的动态值的语法糖，省去了父组件需要写的方法，但是子组件emit时要加上update")]),t._v(" "),a("p",[t._v("子组件触发事件时需要this.$emit(update:父传过来的属性)")]),t._v(" "),a("p",[t._v("父组件中不需要再监听事件及写个方法来修改这个值了。")]),t._v(" "),a("h2",[t._v("36.v-for key的作用")]),t._v(" "),a("p",[t._v("当页面的数据发生变化时，Diff算法只会比较同一层级的节点：")]),t._v(" "),a("p",[a("strong",[t._v("如果节点类型不同，直接干掉前面的节点，再创建并插入新的节点，不会再比较这个节点以后的子节点了。")])]),t._v(" "),a("p",[a("strong",[t._v("如果节点类型相同，则会重新设置该节点的属性，从而实现节点的更新。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"C:%5CUsers%5C%E9%BB%91%E7%B1%8D%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201109100902969.png",alt:"image-20201109100902969"}})]),t._v(" "),a("p",[a("strong",[t._v("key的作用主要是为了高效的更新虚拟DOM。"),a("strong",[t._v("另外vue中在使用")]),t._v("相同标签名元素的过渡切换")]),t._v("时，也会使用到key属性，其目的也是为了让vue可以区分它们，否则vue只会替换其内部属性而不会触发过渡效果。")]),t._v(" "),a("h2",[t._v("37.keep-alive")]),t._v(" "),a("p",[t._v("Props:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("include")]),t._v(" - 字符串或正则表达式。只有名称匹配的组件会被缓存。")]),t._v(" "),a("li",[a("code",[t._v("exclude")]),t._v(" - 字符串或正则表达式。任何名称匹配的组件都不会被缓存。")]),t._v(" "),a("li",[a("code",[t._v("max")]),t._v(" - 数字。最多可以缓存多少组件实例。")])]),t._v(" "),a("p",[t._v("用法："),a("code",[t._v("<keep-alive>")]),t._v(" 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。和 "),a("code",[t._v("<transition>")]),t._v(" 相似，"),a("code",[t._v("<keep-alive>")]),t._v(" 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在组件的父组件链中。")]),t._v(" "),a("p",[t._v("当组件在 "),a("code",[t._v("<keep-alive>")]),t._v(" 内被切换，它的 "),a("code",[t._v("activated")]),t._v(" 和 "),a("code",[t._v("deactivated")]),t._v(" 这两个生命周期钩子函数将会被对应执行。")]),t._v(" "),a("p",[a("strong",[t._v("遍历整个组件树，只要有就缓存")])]),t._v(" "),a("h2",[t._v("38.vue ref有什么用")]),t._v(" "),a("p",[a("code",[t._v("ref")]),t._v(" 被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 "),a("code",[t._v("$refs")]),t._v(" 对象上。如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例")]),t._v(" "),a("p",[t._v("注意：ref本身是作为渲染结果被创建的，在初始渲染时不能访问它们，那时还不存在。"),a("code",[t._v("$refs")]),t._v("也不是响应式，所以无法进行数据绑定")]),t._v(" "),a("h2",[t._v("39.怎么做首屏优化渲染")]),t._v(" "),a("p",[t._v("一般都是用服务端渲染，中间做一个node中间层，在请求页面时服务器直接把这个页面html在后端拼好，客户端只需要渲染。可以说是老大做的，自己看了一下但是没自己做过。")]),t._v(" "),a("h2",[t._v("40.原生js实现继承")]),t._v(" "),a("p",[t._v("构造函数中写每一次new实例都会执行一遍里面代码，就会创建多少次函数，占用内存空间。所以方法一般都放在原型上，属性放在构造函数中。")]),t._v(" "),a("p",[t._v("我们创建两个构造函数，在子构造函数中调用父构造函数.call方法再把需要的参数传进，就可以实现属性的继承。")]),t._v(" "),a("p",[t._v("方法的继承，我们新建一个对象使用现在的对象赋值给新建对象的__proto__，使用Object.create()，新建一个对象并返回，这个对象原型指向其参数，所以我们将父构造函数的.prototype传进去就可以完成，最后再把this指向回子构造函数即可。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Animal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("sex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("name\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sex"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("sex\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Dog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("sex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("age")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ----------------属性继承")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Animal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("sex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("age\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("eat")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'吃东西Ing'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//-----------------方法继承")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Dog\n")])])]),a("h2",[t._v("41.e.target和e.currentTarget")]),t._v(" "),a("p",[t._v("e.target是触发事件的目标元素，e.currentTarget是绑定事件监听的元素")]),t._v(" "),a("p",[t._v("比如事件委托的ul和小li，给ul绑定事件进行事件委托，则ul是e.currentTarget，li是e.target")]),t._v(" "),a("h2",[t._v("42.cookie的生命周期（如何失效）")]),t._v(" "),a("p",[t._v("服务器设置cookie时有一个expires，过期时间，在设置的某个时间点后该cookie就会失效。maxAge：最大失效时间，有效期，设置在多少后失效")]),t._v(" "),a("p",[t._v("区别是：maxAge是相对值，相对服务器第一次请求时记录的时间")]),t._v(" "),a("p",[t._v("Expires是相对稳健的最后访问时间或者修改时间")]),t._v(" "),a("p",[t._v("基本属性：")]),t._v(" "),a("h2",[t._v("43.http和http2的区别，http2的新特性")]),t._v(" "),a("h2",[t._v("44.ajax")]),t._v(" "),a("p",[t._v("AJAX = 异步 JavaScript 和 XML。")]),t._v(" "),a("p",[t._v("AJAX 是一种用于创建快速动态网页的技术。")]),t._v(" "),a("p",[t._v("通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。")]),t._v(" "),a("p",[t._v("传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页面。")]),t._v(" "),a("h2",[t._v("45.axios和ajax区别")]),t._v(" "),a("p",[a("strong",[t._v("ajax:"),a("strong",[t._v("传统 Ajax 指的是 XMLHttpRequest（XHR）， 最早出现的发送后端请求技术，隶属于原始js中，核心使用XMLHttpRequest对象，多个请求之间如果有先后关系的话，就会出现")]),t._v("回调地狱")]),t._v("。\nJQuery ajax 是对原生XHR的封装，除此以外还增添了对"),a("strong",[t._v("JSONP")]),t._v("的支持。经过多年的更新维护，真的已经是非常的方便了，优点无需多言；如果是硬要举出几个缺点，那可能只有：\n1.本身是针对MVC的编程,不符合现在前端"),a("strong",[t._v("MVVM")]),t._v("的浪潮\n2.基于原生的XHR开发，XHR本身的架构不清晰。\n3.JQuery整个项目太大，单纯使用ajax却要引入整个JQuery非常的不合理（采取个性化打包的方案又不能享受CDN服务）")]),t._v(" "),a("p",[a("strong",[t._v("axios")]),t._v(":axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，本质上也是对原生XHR的封装，只不过它是Promise的实现版本，符合最新的ES规范，它本身具有以下特征：\n1.从浏览器中创建 XMLHttpRequest\n2.支持 Promise API\n3.客户端支持防止CSRF\n4.提供了一些并发请求的接口（重要，方便了很多的操作）\n5.从 node.js 创建 http 请求\n6.拦截请求和响应\n7.转换请求和响应数据\n8.取消请求\n9.自动转换JSON数据")]),t._v(" "),a("p",[t._v("防止CSRF:就是让你的每个请求都带一个从cookie中拿到的key, 根据浏览器同源策略，假冒的网站是拿不到你cookie中得key的，这样，后台就可以轻松辨别出这个请求是否是用户在假冒网站上的误导输入，从而采取正确的策略。")]),t._v(" "),a("h2",[t._v("46.图片懒加载的原理")]),t._v(" "),a("p",[t._v("先将img标签的src链接设为同一张图片（比如空白图片），然后给img标签设置自定义属性（比如 data-src）,然后将真正的图片地址存储在data-src中，当JS监听到该图片元素进入可视窗口时，将自定义属性中的地址存储到src属性中。达到懒加载的效果。")]),t._v(" "),a("p",[a("strong",[t._v("这样做能防止页面一次性向服务器发送大量请求，导致服务器响应面，页面卡顿崩溃等。")])]),t._v(" "),a("h2",[t._v("47.重绘和重排")]),t._v(" "),a("p",[t._v("重排：当改变 DOM 元素位置或大小时，会导致浏览器重新生成渲染树，这个过程叫重排。")]),t._v(" "),a("p",[t._v("重绘：当重新生成渲染树后，就要将渲染树每个节点绘制到屏幕，这个过程叫重绘。不是所有的动作都会导致重排，例如改变字体颜色，只会导致重绘。记住，重排会导致重绘，重绘不会导致重排 。")]),t._v(" "),a("h2",[t._v("48.rem适配")]),t._v(" "),a("p",[t._v("用postcss-pxtorem插件来将单位转化成rem，再用lib-flexible来设置rem基准值。")]),t._v(" "),a("p",[t._v("lib-flexible就是一行分为十份，每份大小就是当前设备大小除于10。这个是将fontsize配置为十分之一")]),t._v(" "),a("p",[t._v("postcss下载完成后，在根目录配置.postcssrc.js文件。这个是将单位转化为rem。但是不能写行内样式，否则不会转换")]),t._v(" "),a("h2",[t._v("49.浅拷贝和深拷贝")]),t._v(" "),a("p",[t._v("https://juejin.im/post/6889327058158092302#heading-17")]),t._v(" "),a("p",[a("strong",[t._v("浅拷贝：")]),t._v(" 如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以修改新拷贝的对象会影响原对象。")]),t._v(" "),a("p",[a("strong",[t._v("深拷贝：")]),t._v(" 将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且修改新对象不会影响原对象。")]),t._v(" "),a("p",[t._v("实现深拷贝：")]),t._v(" "),a("p",[t._v("1.JSON.parse(JSON.stringify(xxx))")]),t._v(" "),a("p",[t._v("2.递归克隆")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deepClone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("cache "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" dist "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 拷贝数组")]),t._v("\n        dist "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 拷贝函数")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("dist")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("target")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 拷贝正则表达式")]),t._v("\n       dist "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          dist "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 拷贝普通对象")]),t._v("\n        dist "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将属性和拷贝后的值作为一个map")]),t._v("\n      cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" key "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 过滤掉原型身上的属性")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasOwnProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            dist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deepClone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" dist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",[t._v("50.let const var 区别和实现原理")]),t._v(" "),a("p",[t._v("区别：")]),t._v(" "),a("ol",[a("li",[t._v("var与let是可以声明变量，const不能声明变量，只能声明只读的常量。")]),t._v(" "),a("li",[t._v("var声明的变量不存在块级作用域，他在全局内有效。let与const的声明只在其所在的代码块中有效。")]),t._v(" "),a("li",[t._v("let/const不能在同一个作用域中声明相同变量/常量，var可以多次重复声明。")]),t._v(" "),a("li",[t._v("var存在"),a("a",{attrs:{href:"https://www.jianshu.com/p/76ab117d63b6",target:"_blank",rel:"noopener noreferrer"}},[t._v("变量提升"),a("OutboundLink")],1),t._v(",所以var能先使用在声明，但是let const必须先声明再使用。")]),t._v(" "),a("li",[t._v("let/const存在暂时性死区。")]),t._v(" "),a("li",[t._v("const声明时必须初始化赋值，一旦声明，其声明赋值的值就不允许改变，更不可以重复声明。")])]),t._v(" "),a("p",[t._v("原理：")]),t._v(" "),a("ul",[a("li",[t._v("var:会直接在栈("),a("strong",[t._v("基础数据类型")]),t._v(")内存里预分配内存空间，然后等到实际语句执行的时候，再存储对应的变量，如果传的是引用类型，那么会在堆内存里开辟一个内存空间存储实际内容，栈内存会存储一个指向堆内存的指针。")]),t._v(" "),a("li",[t._v("let:是不会在栈内存里预分配内存空间，而且在栈内存分配变量时，做一个检查，如果已经有相同变量名存在就会报错。")]),t._v(" "),a("li",[t._v("const:也不会预分配内存空间，在栈内存分配变量时也会做同样的检查。不过const存储的变量是不可修改的，对于基本类型来说你无法修改定义的值，对于引用类型来说你无法修改栈内存里分配的指针，但是你可以修改指针指向的对象里面的属性。")])]),t._v(" "),a("h2",[t._v("51.mvvm")]),t._v(" "),a("p",[t._v("MVVM(Model-View-ViewModel), 源自于经典的 Model–View–Controller（MVC）模式。MVVM 的出现促进了 GUI 前端开发与后端业务逻辑的分离，极大地提高了前端开发效率。MVVM 的核心是 ViewModel 层，它就像是一个中转站（value converter），负责转换 Model 中的数据对象来让数据变得更容易管理和使用，该层向上与视图层进行双向数据绑定，向下与 Model 层通过接口请求进行数据交互，起呈上启下作用。View 层展现的不是 Model 层的数据，而是 ViewModel 的数据，由 ViewModel 负责与 Model 层交互，这就完全解耦了 View 层和 Model 层，这个解耦是至关重要的，它是前后端分离方案实施的最重要一环。")]),t._v(" "),a("h2",[t._v("52.虚拟DOM")]),t._v(" "),a("p",[t._v("假设一次操作中有10次更新DOM的动作，虚拟DOM不会立即操作DOM，而是将这10次更新的diff内容保存到本地一个JS对象中，最终将这个JS对象一次性attch到DOM树上，再进行后续操作，避免大量无谓的计算量。所以，用JS对象模拟DOM节点的好处是，页面的更新可以先全部反映在虚拟DOM上，操作内存中的JS对象的速度显然要更快，等更新完成后，再将最终的JS对象映射成真实的DOM，交由浏览器去绘制。")]),t._v(" "),a("h2",[t._v("53.http协议")]),t._v(" "),a("p",[t._v("超文本传输协议是一种应用层上的客户端/服务端模型的通信协议，由请求和响应构成，客户端发送请求给服务端，服务端返回响应给客户端，且是无状态的。")]),t._v(" "),a("ul",[a("li",[t._v("协议：规定了通信双方必须遵循的数据传输格式，这样通信双方按照约定的格式才能准备的通信")]),t._v(" "),a("li",[t._v("无状态：指两次连接通信之间没有任何关系，每次都是一个新的连接，服务端不会记录前后的请求信息。")])]),t._v(" "),a("p",[t._v("传送的数据（html文档，图片，普通文本）是通过url定位的，url由协议scheme、用户密码(一般为匿名)、主机host、端口port、路径path、请求参数(params)、查询参数(query)、片段(fragment)。")]),t._v(" "),a("h3",[t._v("协议内容")]),t._v(" "),a("p",[t._v("1、http请求")]),t._v(" "),a("ul",[a("li",[t._v("请求行：请求方法 路径和查询参数 协议(http)版本 换行符")]),t._v(" "),a("li",[t._v("请求头：包含额外的信息来帮助服务器如何响应比如Accept设置接收响应资源的类型")]),t._v(" "),a("li",[t._v("请求体：需要发送的数据内容")])]),t._v(" "),a("p",[t._v("2、响应")]),t._v(" "),a("ul",[a("li",[t._v("状态行：协议版本 状态码 状态码描述")]),t._v(" "),a("li",[t._v("响应头：与请求头类似，包含额外的信息")]),t._v(" "),a("li",[t._v("响应体：返回的数据")])]),t._v(" "),a("h3",[t._v("请求方法")]),t._v(" "),a("p",[a("img",{attrs:{src:"C:%5CUsers%5C%E9%BB%91%E7%B1%8D%5CPictures%5C%E6%88%AA%E5%9B%BE%5Cv2-c4f7ae799ff53a3c8be008bff4af0589_r.jpg",alt:""}})]),t._v(" "),a("h3",[t._v("请求和响应常见通用头")]),t._v(" "),a("p",[a("img",{attrs:{src:"C:%5CUsers%5C%E9%BB%91%E7%B1%8D%5CPictures%5C%E6%88%AA%E5%9B%BE%5Cv2-33dcad1049814f985e523bb705b4fa68_r.jpg",alt:""}})]),t._v(" "),a("h2",[t._v("54.响应状态码")]),t._v(" "),a("p",[t._v("100-199 一般信息，服务器收到请求，需要请求者继续执行操作")]),t._v(" "),a("p",[t._v("200-299 成功响应，操作被成功接收并处理")]),t._v(" "),a("p",[t._v("300-399 重定向，需要进一步的操作以完成请求")]),t._v(" "),a("p",[t._v("400-499 客户端错误，请求包含语法错误或无法完成请求")]),t._v(" "),a("p",[t._v("500-599 服务端错误，服务器在处理请求的过程中发生了错误")]),t._v(" "),a("p",[t._v("常见的有：")]),t._v(" "),a("p",[t._v("201：该请求已成功，一般为post/put请求成功后返回的响应")]),t._v(" "),a("p",[t._v("400：请求有错误，参数错误或语义错误")]),t._v(" "),a("p",[t._v("401：unauthorized，身份验证失败，缺少这个头相关信息或者信息错误")]),t._v(" "),a("p",[t._v("403：拒绝执行，并把理由放在返回体中")]),t._v(" "),a("p",[t._v("404：请求失败，资源未存在")]),t._v(" "),a("p",[t._v("500：服务器不知道该如何处理")]),t._v(" "),a("p",[t._v("502：服务器得到一个错误的响应")]),t._v(" "),a("h2",[t._v("55.简单请求和复杂请求")]),t._v(" "),a("p",[t._v("简单请求：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("使用"),a("code",[t._v("GET、POST、HEAD")]),t._v("其中一种方法")])]),t._v(" "),a("li",[a("p",[t._v("只使用了如下的安全首部字段，不得人为设置其他首部字段")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("Accept")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Accept-Language")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("Content-Language")])])]),t._v(" "),a("li",[a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Content-Type\n")])])]),a("p",[t._v("仅限以下三种")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("text/plain")])]),t._v(" "),a("li",[a("code",[t._v("multipart/form-data")])]),t._v(" "),a("li",[a("code",[t._v("application/x-www-form-urlencoded")])])])]),t._v(" "),a("li",[a("p",[t._v("HTML头部header field字段："),a("code",[t._v("DPR、Download、Save-Data、Viewport-Width、WIdth")])])])])]),t._v(" "),a("li",[a("p",[t._v("请求中的任意"),a("code",[t._v("XMLHttpRequestUpload")]),t._v(" 对象均没有注册任何事件监听器；XMLHttpRequestUpload 对象可以使用 XMLHttpRequest.upload 属性访问")])]),t._v(" "),a("li",[a("p",[t._v("请求中没有使用 ReadableStream 对象")])])]),t._v(" "),a("h2",[t._v("56.https")]),t._v(" "),a("p",[t._v("（Hypertext Transfer Protocol Secure：超文本传输安全协议）是一种透过计算机网络进行安全通信的传输协议。HTTPS 经由 HTTP 进行通信，但利用 SSL/TLS 来加密数据包。HTTPS 开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。")]),t._v(" "),a("p",[t._v("HTTPS 默认工作在 TCP 协议443端口，它的工作流程一般如以下方式：")]),t._v(" "),a("ul",[a("li",[t._v("1、TCP 三次同步握手")]),t._v(" "),a("li",[t._v("2、客户端验证服务器数字证书")]),t._v(" "),a("li",[t._v("3、DH 算法协商对称加密算法的密钥、hash 算法的密钥")]),t._v(" "),a("li",[t._v("4、SSL 安全加密隧道协商完成")]),t._v(" "),a("li",[t._v("5、网页以加密的方式传输，用协商的对称加密算法和密钥加密，保证数据机密性；用协商的hash算法进行数据完整性保护，保证数据不被篡改。")])]),t._v(" "),a("h3",[t._v("http和https区别")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("HTTP 明文传输，数据都是未加密的，安全性较差，HTTPS（SSL+HTTP） 数据传输过程是加密的，安全性较好。")])]),t._v(" "),a("li",[t._v("使用 HTTPS 协议需要到 CA（Certificate Authority，数字证书认证机构） 申请证书，一般免费证书较少，因而需要一定费用。证书颁发机构如：Symantec、Comodo、GoDaddy 和 GlobalSign 等。")]),t._v(" "),a("li",[t._v("HTTP 页面响应速度比 HTTPS 快，主要是因为 HTTP 使用 TCP 三次握手建立连接，客户端和服务器需要交换 3 个包，而 HTTPS除了 TCP 的三个包，还要加上 ssl 握手需要的 9 个包，所以一共是 12 个包。")]),t._v(" "),a("li",[t._v("http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443。")]),t._v(" "),a("li",[t._v("HTTPS 其实就是建构在 SSL/TLS 之上的 HTTP 协议，所以，要比较 HTTPS 比 HTTP 要更耗费服务器资源。")])]),t._v(" "),a("p",[t._v("https://www.runoob.com/w3cnote/http-vs-https.html")]),t._v(" "),a("h2",[t._v("57.http2")]),t._v(" "),a("ol",[a("li",[t._v("二进制传输")]),t._v(" "),a("li",[t._v("多路复用")]),t._v(" "),a("li",[t._v("header压缩")]),t._v(" "),a("li",[t._v("server push")])]),t._v(" "),a("h2",[t._v("58.轮播图")]),t._v(" "),a("h3",[t._v("swiper")]),t._v(" "),a("p",[t._v("1.导入插件")]),t._v(" "),a("p",[t._v("2.class都为swiper-xxx")]),t._v(" "),a("p",[t._v("3.初始化swiper。direction垂直切换选项、loop循环模式切换、pagination分页器、")]),t._v(" "),a("h3",[t._v("手写")]),t._v(" "),a("p",[t._v("使用的是css只显示一张图片，其余隐藏。通过计算偏移量利用定时器实现自动播放，或通过手动点击事件切换图片。")]),t._v(" "),a("h2",[t._v("59.虚拟DOM")]),t._v(" "),a("ol",[a("li",[t._v("用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中")]),t._v(" "),a("li",[t._v("当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异")]),t._v(" "),a("li",[t._v("把2所记录的差异应用到步骤1所构建的真正的DOM树上，视图就更新了")])]),t._v(" "),a("p",[t._v("Virtual DOM 本质上就是在 JS 和 DOM 之间做了一个缓存。可以类比 CPU 和硬盘，既然硬盘这么慢，我们就在它们之间加个缓存：既然 DOM 这么慢，我们就在它们 JS 和 DOM 之间加个缓存。CPU（JS）只操作内存（Virtual DOM），最后的时候再把变更写入硬盘（DOM）。")]),t._v(" "),a("h2",[t._v("60.xss和csrf")]),t._v(" "),a("p",[t._v("XSS：跨站脚本攻击（Cross Site Script，XSS攻击），通常指黑客通过“HTML注入”篡改了网页，插入了恶意的脚本，从而在用户浏览网页时，控制用户浏览器的一种攻击。")]),t._v(" "),a("p",[t._v("XSS的本质是一种“HTML注入”，用户的数据被当成了HTML代码一部分来执行，从而产生了新的语义。")]),t._v(" "),a("p",[t._v("CSRF:CSRF（Cross-site request forgery跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。XSS利用站点内的信任用户，而CSRF则通过伪装来自受信任用户的请求来利用受信任的网站。")])])}),[],!1,null,null,null);s.default=e.exports}}]);